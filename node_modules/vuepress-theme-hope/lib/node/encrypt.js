"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveEncrypt = exports.handleCrytoForWebpack = void 0;
const utils_1 = require("./utils");
const bcryptjs_1 = require("bcryptjs");
const handleCrytoForWebpack = (app) => {
    const { bundler, bundlerConfig } = app.options;
    // for webpack
    if (bundler.endsWith("webpack")) {
        const webpackBundlerConfig = bundlerConfig;
        const { configureWebpack } = webpackBundlerConfig;
        webpackBundlerConfig.configureWebpack = (config, isServer, isBuild) => {
            if (!config.resolve)
                config.resolve = {};
            config.resolve.fallback = { crypto: false, ...config.resolve.fallback };
            const result = configureWebpack === null || configureWebpack === void 0 ? void 0 : configureWebpack(config, isServer, isBuild);
            if (result)
                return result;
        };
    }
};
exports.handleCrytoForWebpack = handleCrytoForWebpack;
const resolveEncrypt = (encrypt) => {
    // handle global token
    if (encrypt.admin)
        if (typeof encrypt.admin === "string")
            encrypt.admin = (0, bcryptjs_1.hashSync)(encrypt.admin);
        else if (Array.isArray(encrypt.admin))
            encrypt.admin = encrypt.admin
                .map((globalToken) => {
                if (typeof globalToken === "string")
                    return (0, bcryptjs_1.hashSync)(globalToken);
                utils_1.logger.error(`You config "themeConfig.encrypt.global", but your config is invalid. 

          All password MUST be string. But we found one’s type is ${typeof globalToken}. Please fix it!`);
                return null;
            })
                .filter((item) => item !== null);
        else {
            utils_1.logger.error(`You are asking for global encryption but you provide invalid "global" config. 
        
        Please check "global" in your "themeConfig.encrypt" config. It can be string or string[], but you are providing ${typeof encrypt.admin}. Please fix it!`);
            delete encrypt.admin;
        }
    const tokenConfig = encrypt.config || {};
    Object.keys(tokenConfig).forEach((key) => {
        const token = tokenConfig[key];
        if (typeof token === "string")
            tokenConfig[key] = (0, bcryptjs_1.hashSync)(token);
        else if (Array.isArray(token))
            tokenConfig[key] = token
                .map((configToken) => {
                const hash = (0, bcryptjs_1.hashSync)(configToken);
                if (typeof configToken === "string")
                    return hash;
                utils_1.logger.error(`You config "themeConfig.encrypt.config", but your config is invalid. 
        
Key ${key}’s value MUST be string or string[]. But it’s type is ${typeof configToken}. Please fix it!`);
                return null;
            })
                .filter((item) => item !== null);
        else {
            utils_1.logger.error(`[You config "themeConfig.encrypt.config", but your config is invalid. 
        
        The value of key ${key} MUST be string or string[]. But not it’s ${typeof token}. Please fix it!`);
            delete tokenConfig[key];
        }
    });
};
exports.resolveEncrypt = resolveEncrypt;
//# sourceMappingURL=encrypt.js.map