"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getThemeConfig = void 0;
const vuepress_shared_1 = require("@mr-hope/vuepress-shared");
const encrypt_1 = require("./encrypt");
const locales_1 = require("./locales");
const rootAllowConfig = [
    "blog",
    "encrypt",
    "pure",
    "iconPrefix",
    "darkmode",
    "themeColor",
    "fullscreen",
    "backToTop",
    "mobileBreakPoint",
];
const defaultRootOptions = {
    // features
    blog: {},
    encrypt: {},
    // appearance
    pure: false,
    iconPrefix: "",
    darkmode: "auto-switch",
    themeColor: {
        red: "#e74c3c",
        blue: "#3498db",
        green: "#3eaf7c",
        orange: "#f39c12",
        purple: "#8e44ad",
    },
    fullscreen: true,
};
const defaultLocaleOptions = {
    // features
    blog: {},
    // layouts
    repoDisplay: true,
    navbarIcon: true,
    navbarAutoHide: "mobile",
    hideSiteNameonMobile: true,
    sidebar: "structure",
    sidebarIcon: true,
    headingDepth: 2,
};
/**
 * Get client side `themeConfig`
 */
const getThemeConfig = (app, themeOptions) => {
    const themeData = {
        ...defaultRootOptions,
        ...Object.fromEntries(Object.entries(themeOptions).filter(([key]) => rootAllowConfig.includes(key))),
        locales: 
        // assign locale data to `themeConfig`
        (0, vuepress_shared_1.getLocales)(app, locales_1.themeLocalesData, 
        // extract localeConfig
        Object.fromEntries([
            ["/", {}],
            ...Object.entries(themeOptions.locales || {}),
        ].map(([localePath, localeConfig]) => [
            localePath,
            {
                // defauilt config
                ...defaultLocaleOptions,
                // root config
                ...Object.fromEntries(Object.entries(themeOptions).filter(([key]) => key === "blog" ||
                    (key !== "locales" && !rootAllowConfig.includes(key)))),
                // locale options
                ...localeConfig,
            },
        ]))),
    };
    // handle encrypt options
    (0, encrypt_1.resolveEncrypt)(themeData.encrypt);
    if (app.env.isDebug)
        console.log("Theme config: ", themeData);
    return themeData;
};
exports.getThemeConfig = getThemeConfig;
//# sourceMappingURL=getThemeConfig.js.map