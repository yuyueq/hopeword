"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkSocialMediaIcons = void 0;
const utils_1 = require("@vuepress/utils");
const utils_2 = require("./utils");
const checkSocialMediaIcons = (themeConfig) => {
    var _a, _b, _c;
    const icons = {};
    const checkIcon = (key, value) => {
        if (typeof value === "string") {
            const templatePath = utils_1.path.resolve(__dirname, `../../templates/socialMediaIcons/${key.toLocaleLowerCase()}.svg`);
            if (utils_1.fs.existsSync(templatePath)) {
                icons[key] = utils_1.fs.readFileSync(templatePath, { encoding: "utf-8" });
                return value;
            }
            utils_2.logger.warn(`${key} icon in blog media config not found!`);
            return false;
        }
        if (Array.isArray(value)) {
            // it's a svg string
            if (value[1].startsWith("<svg")) {
                icons[key] = value[1];
                return value[0];
            }
            // it's probably a path
            if (utils_1.fs.existsSync(value[1])) {
                icons[key] = utils_1.fs.readFileSync(value[1], { encoding: "utf-8" });
                return value[0];
            }
            utils_2.logger.warn(`${key}'s icon ${value[1]} in blog media config is invalid!`);
            return false;
        }
        utils_2.logger.warn(`${key} icon in blog media config has an invalid config!`);
        return false;
    };
    Object.entries(((_a = themeConfig.blog) === null || _a === void 0 ? void 0 : _a.medias) || {}).forEach(([key, value]) => {
        const result = checkIcon(key, value);
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        if (result)
            themeConfig.blog.medias[key] = result;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        else
            delete themeConfig.blog.medias[key];
    });
    for (const locales in themeConfig.locales || {}) {
        Object.entries(((_c = (_b = themeConfig.locales) === null || _b === void 0 ? void 0 : _b[locales].blog) === null || _c === void 0 ? void 0 : _c.medias) || {}).forEach(([key, value]) => {
            const result = checkIcon(key, value);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            if (result)
                themeConfig.locales[locales].blog.medias[key] = result;
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            else
                delete themeConfig.locales[locales].blog.medias[key];
        });
    }
    return icons;
};
exports.checkSocialMediaIcons = checkSocialMediaIcons;
//# sourceMappingURL=socialMedia.js.map