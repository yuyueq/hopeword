import { getAuthor, getCategory, getDate, getTag, } from "@mr-hope/vuepress-shared/lib/client";
import { usePageData, usePageFrontmatter, usePageLang } from "@vuepress/client";
import { computed, inject, reactive } from "vue";
import { usePure, useThemeLocaleData } from "./themeData";
export const usePageAuthor = () => {
    const themeLocale = useThemeLocaleData();
    const frontmatter = usePageFrontmatter();
    return computed(() => {
        const { author } = frontmatter.value;
        if (author)
            return getAuthor(author);
        if (author === false)
            return [];
        return getAuthor(themeLocale.value.author, false);
    });
};
export const usePageCategory = () => {
    const frontmatter = usePageFrontmatter();
    return computed(() => getCategory(frontmatter.value.category).map((name) => {
        var _a, _b;
        return ({
            name,
            // this is a hack
            path: ENABLE_BLOG
                ? ((_b = (_a = inject(Symbol.for("categoryMap"))) === null || _a === void 0 ? void 0 : _a.value.map[name]) === null || _b === void 0 ? void 0 : _b.path) || ""
                : "",
        });
    }));
};
export const usePageTag = () => {
    const frontmatter = usePageFrontmatter();
    return computed(() => getTag(frontmatter.value.tag).map((name) => {
        var _a, _b;
        return ({
            name,
            // this is a hack
            path: ENABLE_BLOG
                ? ((_b = (_a = inject(Symbol.for("tagMap"))) === null || _a === void 0 ? void 0 : _a.value.map[name]) === null || _b === void 0 ? void 0 : _b.path) ||
                    ""
                : "",
        });
    }));
};
export const usePageDate = () => {
    const frontmatter = usePageFrontmatter();
    const page = usePageData();
    const pageLang = usePageLang();
    return computed(() => {
        const { date } = frontmatter.value;
        const options = { lang: pageLang.value, type: "date" };
        if (date)
            return getDate(date, options);
        const { createdTime } = page.value.git || {};
        if (createdTime)
            return getDate(new Date(createdTime), options);
        return null;
    });
};
export const usePageInfo = () => {
    const themeLocale = useThemeLocaleData();
    const page = usePageData();
    const frontmatter = usePageFrontmatter();
    const author = usePageAuthor();
    const category = usePageCategory();
    const tag = usePageTag();
    const date = usePageDate();
    const pure = usePure();
    return reactive({
        config: frontmatter.value.pageInfo === false
            ? false
            : frontmatter.value.pageInfo || themeLocale.value.pageInfo,
        author: author.value,
        category: category.value,
        date: date.value,
        tag: tag.value,
        isOriginal: frontmatter.value.isOriginal,
        readingTime: page.value.readingTime,
        pageview: "pageview" in frontmatter.value
            ? frontmatter.value.pageview
            : ENABLE_VISITOR,
        color: !pure.value,
        hint: !pure.value,
    });
};
//# sourceMappingURL=pageInfo.js.map