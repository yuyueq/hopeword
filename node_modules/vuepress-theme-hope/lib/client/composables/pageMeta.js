import { computed } from "vue";
import { usePageData, usePageFrontmatter, useSiteLocaleData, } from "@vuepress/client";
import { useThemeLocaleData } from "./themeData";
import { resolveEditLink } from "@theme-hope/utils";
export const useEditLink = () => {
    const themeLocale = useThemeLocaleData();
    const page = usePageData();
    const frontmatter = usePageFrontmatter();
    return computed(() => {
        var _a, _b;
        const { repo, docsRepo = repo, docsBranch = "main", docsDir = "", editLink, editLinkPattern, } = themeLocale.value;
        const showEditLink = (_b = (_a = frontmatter.value.editLink) !== null && _a !== void 0 ? _a : editLink) !== null && _b !== void 0 ? _b : true;
        if (!showEditLink)
            return null;
        if (!docsRepo)
            return null;
        const link = resolveEditLink({
            docsRepo,
            docsBranch,
            docsDir,
            editLinkPattern,
            filePathRelative: page.value.filePathRelative,
        });
        if (!link)
            return null;
        return {
            text: themeLocale.value.metaLocales.editLink,
            link,
        };
    });
};
export const useUpdateTime = () => {
    const siteLocale = useSiteLocaleData();
    const themeLocale = useThemeLocaleData();
    const page = usePageData();
    const frontmatter = usePageFrontmatter();
    return computed(() => {
        var _a, _b, _c, _d;
        const showLastUpdated = (_b = (_a = frontmatter.value.lastUpdated) !== null && _a !== void 0 ? _a : themeLocale.value.lastUpdated) !== null && _b !== void 0 ? _b : true;
        if (!showLastUpdated)
            return null;
        if (!((_c = page.value.git) === null || _c === void 0 ? void 0 : _c.updatedTime))
            return null;
        const updatedDate = new Date((_d = page.value.git) === null || _d === void 0 ? void 0 : _d.updatedTime);
        return updatedDate.toLocaleString(siteLocale.value.lang);
    });
};
export const useContributors = () => {
    const themeLocale = useThemeLocaleData();
    const page = usePageData();
    const frontmatter = usePageFrontmatter();
    return computed(() => {
        var _a, _b, _c, _d;
        const showContributors = (_b = (_a = frontmatter.value.contributors) !== null && _a !== void 0 ? _a : themeLocale.value.contributors) !== null && _b !== void 0 ? _b : true;
        if (!showContributors)
            return null;
        return (_d = (_c = page.value.git) === null || _c === void 0 ? void 0 : _c.contributors) !== null && _d !== void 0 ? _d : null;
    });
};
//# sourceMappingURL=pageMeta.js.map