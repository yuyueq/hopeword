import { useRouteLocale, useSiteLocaleData } from "@vuepress/client";
import { computed } from "vue";
import { useRouter } from "vue-router";
import { useThemeData, useThemeLocaleData } from "@theme-hope/composables";
/**
 * Get navbar config of select language dropdown
 */
export const useNavbarLanguageDropdown = () => {
    const router = useRouter();
    const routeLocale = useRouteLocale();
    const siteLocale = useSiteLocaleData();
    const themeData = useThemeData();
    const themeLocale = useThemeLocaleData();
    return computed(() => {
        const localePaths = Object.keys(siteLocale.value.locales);
        // do not display language selection dropdown if there is only one language
        if (localePaths.length < 2)
            return null;
        const currentPath = router.currentRoute.value.path;
        const { navbarLocales } = themeLocale.value;
        const languageDropdown = {
            text: navbarLocales === null || navbarLocales === void 0 ? void 0 : navbarLocales.selectLangText,
            ariaLabel: navbarLocales === null || navbarLocales === void 0 ? void 0 : navbarLocales.selectLangAriaLabel,
            children: localePaths.map((targetLocalePath) => {
                var _a, _b, _c, _d, _e, _f, _g;
                // target locale config of this langauge link
                const targetSiteLocale = (_b = (_a = siteLocale.value.locales) === null || _a === void 0 ? void 0 : _a[targetLocalePath]) !== null && _b !== void 0 ? _b : {};
                const targetThemeLocale = (_d = (_c = themeData.value.locales) === null || _c === void 0 ? void 0 : _c[targetLocalePath]) !== null && _d !== void 0 ? _d : {};
                const targetLang = targetSiteLocale.lang || "";
                const text = (_f = (_e = targetThemeLocale.navbarLocales) === null || _e === void 0 ? void 0 : _e.langName) !== null && _f !== void 0 ? _f : targetLang;
                let link;
                // if the target language is current language
                if (targetLang === siteLocale.value.lang) {
                    // stay at current link
                    link = currentPath;
                }
                // if the target language is not current language
                else {
                    const targetLocalePage = currentPath.replace(routeLocale.value, targetLocalePath);
                    link =
                        // try to link to the corresponding page of current page
                        router.getRoutes().some((item) => item.path === targetLocalePage)
                            ? targetLocalePage
                            : // or fallback to homepage
                                (_g = targetThemeLocale.home) !== null && _g !== void 0 ? _g : targetLocalePath;
                }
                return {
                    text,
                    link,
                };
            }),
        };
        return languageDropdown;
    });
};
//# sourceMappingURL=navbarLanguageDropdown.js.map