import { computed, defineComponent, h, ref } from "vue";
import { useMobile, useThemeLocaleData } from "@theme-hope/composables";
import NavbarBrand from "@theme-hope/module/navbar/components/NavbarBrand";
import NavbarLinks from "@theme-hope/module/navbar/components/NavbarLinks";
import ToggleSidebarButton from "@theme-hope/module/navbar/components/ToggleSidebarButton";
import NavActions from "@theme-hope/module/navbar/components/NavActions";
import NavScreen from "@theme-hope/module/navbar/components/NavScreen";
import "../styles/navbar.scss";
export default defineComponent({
    name: "NavBar",
    emits: ["toggle-sidebar"],
    setup(_props, { emit, slots }) {
        const themeLocale = useThemeLocaleData();
        const isMobile = useMobile();
        const showScreen = ref(false);
        const navbar = ref();
        const siteBrand = ref();
        const linksWrapperMaxWidth = ref(0);
        const linksWrapperStyle = computed(() => {
            if (!linksWrapperMaxWidth.value)
                return {};
            return {
                "max-width": `${linksWrapperMaxWidth.value}px`,
            };
        });
        const autoHide = computed(() => {
            const { navbarAutoHide } = themeLocale.value;
            return (navbarAutoHide !== "none" &&
                (navbarAutoHide === "always" || isMobile.value));
        });
        return () => [
            h("header", {
                class: [
                    "navbar",
                    {
                        "auto-hide": autoHide.value,
                        "hide-icon": !themeLocale.value.navbarIcon,
                    },
                ],
                ref: navbar,
            }, [
                h(ToggleSidebarButton, {
                    onToggle: () => {
                        if (showScreen.value)
                            showScreen.value = false;
                        emit("toggle-sidebar");
                    },
                }),
                h(NavbarBrand, { ref: siteBrand }, () => { var _a; return (_a = slots.left) === null || _a === void 0 ? void 0 : _a.call(slots); }),
                h(NavbarLinks, {
                    style: linksWrapperStyle.value,
                }),
                h(NavActions, {
                    showScreen: showScreen.value,
                    onToggleScreen: () => {
                        showScreen.value = !showScreen.value;
                    },
                }, {
                    before: () => { var _a; return (_a = slots.center) === null || _a === void 0 ? void 0 : _a.call(slots); },
                    after: () => { var _a; return (_a = slots.right) === null || _a === void 0 ? void 0 : _a.call(slots); },
                }),
            ]),
            h(NavScreen, {
                active: showScreen.value,
                onClose: () => {
                    showScreen.value = false;
                },
            }, {
                before: () => { var _a; return (_a = slots.screenTop) === null || _a === void 0 ? void 0 : _a.call(slots); },
                after: () => { var _a; return (_a = slots.screenBottom) === null || _a === void 0 ? void 0 : _a.call(slots); },
            }),
        ];
    },
});
//# sourceMappingURL=Navbar.js.map