import { compareSync } from "bcryptjs";
import { computed, onMounted, ref } from "vue";
import { useEncryptOptions } from "./utils";
const STORAGE_KEY = "vuepress-theme-hope-global-token";
export const useGlobalEcrypt = () => {
    const options = useEncryptOptions();
    const globalToken = ref("");
    const isGlobalEncrypted = computed(() => {
        if (options.value.global && options.value.admin) {
            const { admin: global } = options.value;
            const globalTokens = typeof global === "string" ? [global] : global;
            // none of the token matches
            return !globalTokens.some((globalPassword) => compareSync(globalToken.value, globalPassword));
        }
        return false;
    });
    const validateGlobalToken = (inputToken, keep = false) => {
        const { admin } = options.value;
        const globalPasswords = typeof admin === "string" ? [admin] : admin || [];
        if (
        // some of the token matches
        globalPasswords.some((token) => compareSync(inputToken, token))) {
            globalToken.value = inputToken;
            (keep ? localStorage : sessionStorage).setItem(STORAGE_KEY, inputToken);
        }
    };
    onMounted(() => {
        const token = sessionStorage.getItem(STORAGE_KEY) || localStorage.getItem(STORAGE_KEY);
        if (token)
            validateGlobalToken(token);
    });
    return {
        isGlobalEncrypted,
        validateGlobalToken,
    };
};
//# sourceMappingURL=global.js.map