export declare type GiscusProps = Giscus;
export declare type Giscus = {
	repo: Repo;
	repoId: string;
	category?: string;
	categoryId?: string;
	mapping: Mapping;
	term?: string;
	theme?: Theme;
	reactionsEnabled?: BooleanString;
	emitMetadata?: BooleanString;
	inputPosition?: InputPosition;
	lang?: Lang;
};
export declare type BooleanString = "0" | "1";
export declare type InputPosition = "top" | "bottom";
export declare type Session = {
	session: string;
};
export declare type Repo = `${string}/${string}`;
export declare type Mapping = "url" | "title" | "og:title" | "specific" | "number" | "pathname";
export declare type GenericString = string & Record<never, never>;
export declare type Theme = "light" | "light_high_contrast" | "light_protanopia" | "dark" | "dark_high_contrast" | "dark_protanopia" | "dark_dimmed" | "transparent_dark" | "preferred_color_scheme" | `https://${string}` | GenericString;
export declare type Lang = "de" | "gsw" | "en" | "es" | "fr" | "id" | "it" | "ja" | "ko" | "pl" | "ro" | "ru" | "vi" | "zh-CN" | "zh-TW" | GenericString;
export declare const Giscus: import("vue").DefineComponent<{
	repo: {
		type: PropType<`${string}/${string}`>;
		required: true;
	};
	repoId: {
		type: PropType<string>;
		required: true;
	};
	category: PropType<string>;
	categoryId: PropType<string>;
	mapping: {
		type: PropType<Mapping>;
		required: true;
	};
	term: PropType<string>;
	lang: {
		type: PropType<Lang>;
		default: string;
	};
	theme: {
		type: PropType<Theme>;
		default: string;
	};
	reactionsEnabled: {
		type: PropType<BooleanString>;
		default: string;
	};
	emitMetadata: {
		type: PropType<BooleanString>;
		default: string;
	};
	inputPosition: {
		type: PropType<InputPosition>;
		default: string;
	};
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
	repo?: unknown;
	repoId?: unknown;
	category?: unknown;
	categoryId?: unknown;
	mapping?: unknown;
	term?: unknown;
	lang?: unknown;
	theme?: unknown;
	reactionsEnabled?: unknown;
	emitMetadata?: unknown;
	inputPosition?: unknown;
} & {
	repo: `${string}/${string}`;
	repoId: string;
	mapping: Mapping;
	theme: Theme;
	reactionsEnabled: BooleanString;
	emitMetadata: BooleanString;
	inputPosition: InputPosition;
	lang: Lang;
} & {
	category?: string | undefined;
	categoryId?: string | undefined;
	term?: string | undefined;
}>, {
	theme: Theme;
	reactionsEnabled: BooleanString;
	emitMetadata: BooleanString;
	inputPosition: InputPosition;
	lang: Lang;
}>;
export declare const plugin: Plugin;

export {};
