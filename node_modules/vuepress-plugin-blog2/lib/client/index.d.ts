import * as vue from 'vue';
import { ComputedRef } from 'vue';

interface Article<T extends Record<string, unknown> = Record<string, unknown>> {
    path: string;
    info: T;
}
declare type Articles<T extends Record<string, unknown> = Record<string, unknown>> = Article<T>[];
interface BlogCategoryData<T extends Record<string, unknown> = Record<string, unknown>> {
    path: string;
    currentItems?: Articles<T>;
    map: Record<string, {
        path: string;
        items: Articles<T>;
    }>;
}
interface BlogTypeData<T extends Record<string, unknown> = Record<string, unknown>> {
    path: string;
    items: Articles<T>;
}

declare const blogCategoryMap: vue.Ref<{
    [x: string]: {
        [x: string]: {
            path: string;
            map: {
                [x: string]: {
                    path: string;
                    keys: string[];
                };
            };
        };
    };
}>;
declare const useBlogCategory: <T extends Record<string, unknown> = Record<string, unknown>>(key?: string) => ComputedRef<BlogCategoryData<T>>;

declare const blogTypeMap: vue.Ref<{
    [x: string]: {
        [x: string]: {
            path: string;
            keys: string[];
        };
    };
}>;
declare const useBlogType: <T extends Record<string, unknown> = Record<string, unknown>>(key?: string) => ComputedRef<BlogTypeData<T>>;

export { blogCategoryMap, blogTypeMap, useBlogCategory, useBlogType };
