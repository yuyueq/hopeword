{"version":3,"file":"appSetup.js","sources":["../../src/client/composables/useForceUpdate.ts","../../src/client/composables/usePWAEvent.ts","../../src/client/appSetup.ts","../../../../node_modules/register-service-worker/index.js","../../../../node_modules/mitt/dist/mitt.mjs","../../src/client/composables/useRegister.ts"],"sourcesContent":[null,null,null,"// Register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\nvar isLocalhost = function () { return Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n); }\n\nvar waitWindowLoad\n// https://github.com/yyx990803/register-service-worker/pull/33#discussion_r394181861\nif (typeof window !== 'undefined') {\n  // Typically, a browser that supports `serviceWorker` should also have supported\n  // `Promise`. But as this package can be used in environments without service\n  // worker support (in that case it would do nothing), there's a chance that\n  // `Promise` does not exist. So we must check for its existence first.\n  if (typeof Promise !== 'undefined') {\n    waitWindowLoad = new Promise(function (resolve) { return window.addEventListener('load', resolve); })\n  } else {\n    waitWindowLoad = { then: function (cb) { return window.addEventListener('load', cb); } }\n  }\n}\n\nexport function register (swUrl, hooks) {\n  if ( hooks === void 0 ) hooks = {};\n\n  var registrationOptions = hooks.registrationOptions; if ( registrationOptions === void 0 ) registrationOptions = {};\n  delete hooks.registrationOptions\n\n  var emit = function (hook) {\n    var args = [], len = arguments.length - 1;\n    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];\n\n    if (hooks && hooks[hook]) {\n      hooks[hook].apply(hooks, args)\n    }\n  }\n\n  if ('serviceWorker' in navigator) {\n    waitWindowLoad.then(function () {\n      if (isLocalhost()) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, emit, registrationOptions)\n        navigator.serviceWorker.ready.then(function (registration) {\n          emit('ready', registration)\n        }).catch(function (error) { return handleError(emit, error); })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, emit, registrationOptions)\n        navigator.serviceWorker.ready.then(function (registration) {\n          emit('ready', registration)\n        }).catch(function (error) { return handleError(emit, error); })\n      }\n    })\n  }\n}\n\nfunction handleError (emit, error) {\n  if (!navigator.onLine) {\n    emit('offline')\n  }\n  emit('error', error)\n}\n\nfunction registerValidSW (swUrl, emit, registrationOptions) {\n  navigator.serviceWorker\n    .register(swUrl, registrationOptions)\n    .then(function (registration) {\n      emit('registered', registration)\n      if (registration.waiting) {\n        emit('updated', registration)\n        return\n      }\n      registration.onupdatefound = function () {\n        emit('updatefound', registration)\n        var installingWorker = registration.installing\n        installingWorker.onstatechange = function () {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              emit('updated', registration)\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              emit('cached', registration)\n            }\n          }\n        }\n      }\n    })\n    .catch(function (error) { return handleError(emit, error); })\n}\n\nfunction checkValidServiceWorker (swUrl, emit, registrationOptions) {\n  // Check if the service worker can be found.\n  fetch(swUrl)\n    .then(function (response) {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404) {\n        // No service worker found.\n        emit('error', new Error((\"Service worker not found at \" + swUrl)))\n        unregister()\n      } else if (response.headers.get('content-type').indexOf('javascript') === -1) {\n        emit('error', new Error(\n          \"Expected \" + swUrl + \" to have javascript content-type, \" +\n          \"but received \" + (response.headers.get('content-type'))))\n        unregister()\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, emit, registrationOptions)\n      }\n    })\n    .catch(function (error) { return handleError(emit, error); })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister()\n    }).catch(function (error) { return handleError(emit, error); })\n  }\n}\n","export default function(n){return{all:n=n||new Map,on:function(t,e){var i=n.get(t);i?i.push(e):n.set(t,[e])},off:function(t,e){var i=n.get(t);i&&(e?i.splice(i.indexOf(e)>>>0,1):n.set(t,[]))},emit:function(t,e){var i=n.get(t);i&&i.slice().map(function(n){n(e)}),(i=n.get(\"*\"))&&i.slice().map(function(n){n(t,e)})}}}\n//# sourceMappingURL=mitt.mjs.map\n",null],"names":["pwaEventSymbol","Symbol","for","waitWindowLoad","appSetup","defineClientAppSetup","__VUEPRESS_SSR__","event","all","n","Map","on","t","e","i","get","push","set","off","splice","indexOf","emit","slice","map","provide","onMounted","async","process","env","NODE_ENV","refreshing","navigator","serviceWorker","controller","addEventListener","window","location","reload","SW_FORCE_UPDATE","getRegistration","then","registration","active","useForceUpdate","register","Promise","withBase","SW_PATH","ready","console","log","registered","cached","updatefound","updated","key","version","Number","localStorage","getItem","setItem","toString","removeItem","offline","error","err","useRegister","handleError","onLine","registerValidSW","swUrl","registrationOptions","waiting","onupdatefound","installingWorker","installing","onstatechange","state","catch","unregister","resolve","cb","hooks","hook","args","len","arguments","length","apply","Boolean","hostname","match","fetch","response","status","Error","headers","checkValidServiceWorker"],"mappings":"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"}